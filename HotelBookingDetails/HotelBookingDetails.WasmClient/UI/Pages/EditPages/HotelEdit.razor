@page "/hotel/{id}"
@using HotelBookingDetails.Domain.Entity
@using HotelBookingDetails.Shared.Dto
@inject ApiClientWrapper Client
@inject IJSRuntime JsRuntime

<Form>
    <Card>
        <CardHeader>
            <Row Class="justify-content-between">
                <Column ColumnSize="ColumnSize.IsAuto">
                    <h4>Изменить отель</h4>
                </Column>
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Button Color="Color.Primary" Clicked="UpdateAsync">Сохранить</Button>
                    <Button Color="Color.Danger" Clicked="DeleteAsync">Удалить</Button>
                    <Button Color="Color.Secondary" onclick="history.back();">Закрыть</Button>
                </Column>
            </Row>
        </CardHeader>
        <CardBody>
            <Field>
                <FieldLabel>Название</FieldLabel>
                <TextEdit @bind-Text="@_updatedHotel.Name"/>
            </Field>
            <Field>
                <FieldLabel>Адрес</FieldLabel>
                <TextEdit @bind-Text="@_updatedHotel.Address"/>
            </Field>
            <Field>
                <FieldLabel>Город</FieldLabel>
                <TextEdit @bind-Text="@_updatedHotel.City"/>
            </Field>
        </CardBody>
    </Card>
</Form>

@code {
    [Parameter] public required string Id { get; set; }
 
    private Hotel _updatedHotel = new()
    {
        Id = 0,
        Name = "",
        Address = "",
        City = ""
    };
    
    protected override async Task OnInitializedAsync()
    {
        if (!int.TryParse(Id, out var id))
            throw new Exception("Неверный айди отеля");
        _updatedHotel = await Client.GetHotel(id);
        await base.OnInitializedAsync();
    }

    private async Task DeleteAsync()
    {
        await Client.DeleteHotel(_updatedHotel.Id);
        await JsRuntime.InvokeVoidAsync("history.back");
    }

    private async Task UpdateAsync()
    {
        await Client.UpdateHotel(_updatedHotel.Id, new HotelDto()
            {
                Name=_updatedHotel.Name,
                Address = _updatedHotel.Address,
                City = _updatedHotel.City
            });
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}